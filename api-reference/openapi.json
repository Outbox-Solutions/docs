{
  "openapi": "3.0.1",
  "info": {
    "title": "Outbox AI API",
    "description": "API for managing AI agents (chatbots and voicebots) on the Outbox platform",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.getoutbox.ai"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "paths": {
    "/agent/list": {
      "get": {
        "summary": "List Agents",
        "description": "Retrieve a list of agents for the authenticated user's company with optional filtering, searching, and pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. If omitted, returns all results unpaginated. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by agent type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["all", "chat", "voice"],
              "default": "all"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter agents by name (case-insensitive partial match)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of agents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/agent/duplicate/{agent_id}": {
      "post": {
        "summary": "Duplicate Agent",
        "description": "Duplicate an existing agent to a specified company (can be the same or different company)",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to duplicate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Duplication details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentDuplicate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the newly duplicated agent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 3 on both source and destination companies)"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/{agent_id}/": {
      "get": {
        "summary": "Get Agent",
        "description": "Retrieve agent details including configuration, tools, files, and platform integrations",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      },
      "patch": {
        "summary": "Update Agent",
        "description": "Update an existing agent's configuration",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Agent fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid data or failed to retrieve assistant"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Agent",
        "description": "Delete an agent and unassign any associated phone numbers",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/": {
      "post": {
        "summary": "Create Agent",
        "description": "Create a new agent (chatbot or voicebot)",
        "requestBody": {
          "description": "Agent creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the newly created agent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Agent limit reached or failed to create assistant"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 3)"
          }
        }
      }
    },
    "/agent/file/{file_id}": {
      "get": {
        "summary": "Get File Content",
        "description": "Retrieve the text content of an agent's file (supports PDF, DOCX, and text files)",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content retrieved successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Plain text content of the file"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Unsupported file type"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "File not found"
          },
          "500": {
            "description": "Internal Server Error - Error processing file"
          }
        }
      },
      "patch": {
        "summary": "Update File Content",
        "description": "Update the text content of an existing file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New file content",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File updated successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "delete": {
        "summary": "Delete File",
        "description": "Delete a file from an agent and remove it from the knowledge base",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/agent/file": {
      "post": {
        "summary": "Upload File",
        "description": "Upload a file to an agent (file upload, text content, or web scraping)",
        "requestBody": {
          "description": "File upload options - text content, file upload, or URLs for web scraping",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpload"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadMultipart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "Bad Request - Invalid file or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          }
        }
      }
    },
    "/agent/integration/{agent_id}": {
      "post": {
        "summary": "Create/Update Platform Integration",
        "description": "Create or update a platform integration for a chatbot agent (e.g., Instagram, Facebook)",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Platform integration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration created/updated successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields or GHL integration not found"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/integration": {
      "patch": {
        "summary": "Update Integration",
        "description": "Update an existing platform integration",
        "requestBody": {
          "description": "Integration update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration updated successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Integration not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Integration",
        "description": "Delete a platform integration",
        "requestBody": {
          "description": "Integration ID to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration deleted successfully"
          },
          "400": {
            "description": "Bad Request - Missing integration_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Integration not found"
          }
        }
      }
    },
    "/agent/tool/{agent_id}": {
      "get": {
        "summary": "List Agent Tools",
        "description": "Retrieve a list of all tools for an agent (simplified view)",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tools retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToolSimple"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      },
      "post": {
        "summary": "Create/Update Tool",
        "description": "Create or update a tool for an agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Tool configuration",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool created/updated successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/tool": {
      "delete": {
        "summary": "Delete Tool",
        "description": "Delete a tool from an agent",
        "requestBody": {
          "description": "Tool ID to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool deleted successfully"
          },
          "400": {
            "description": "Bad Request - Missing tool_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Tool not found"
          }
        }
      }
    },
    "/agent/chat/{agent_id}": {
      "post": {
        "summary": "Send Chat Message",
        "description": "Send a message to a chatbot agent and receive a response (for chatbot agents only)",
        "security": [],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the chatbot agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Chat message details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid agent type"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/call/{agent_id}": {
      "post": {
        "summary": "Initiate Phone Call",
        "description": "Initiate an outbound phone call with a voicebot agent (for voicebot agents only)",
        "security": [],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the voicebot agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Call initiation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallInitiate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Call initiated immediately",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallResponse"
                }
              }
            }
          },
          "201": {
            "description": "Call queued for later (no concurrent lanes available or scheduled)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Queue object ID"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing phone_number, invalid scheduled_at format, insufficient wallet balance, or failed to create contact"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/module/instance/list": {
      "get": {
        "summary": "List Module Instances",
        "description": "Retrieve a list of all module instances for the authenticated user's company",
        "responses": {
          "200": {
            "description": "List of module instances retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleInstanceSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/module/instance/{instance_id}": {
      "get": {
        "summary": "Get Module Instance",
        "description": "Retrieve detailed information about a specific module instance including configurations and recent logs",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module instance details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleInstanceDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      },
      "patch": {
        "summary": "Update Module Instance",
        "description": "Update a module instance's name",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Module instance update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleInstanceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Module instance updated successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Module Instance",
        "description": "Delete a module instance and clean up associated schedules and configurations",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module instance deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 3)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      }
    },
    "/module/instance": {
      "post": {
        "summary": "Create Module Instance",
        "description": "Create a new module instance",
        "requestBody": {
          "description": "Module instance creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleInstanceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Module instance created successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 3)"
          }
        }
      }
    },
    "/module/instance/configuration/{instance_id}": {
      "get": {
        "summary": "Get Instance Configurations",
        "description": "Retrieve all configuration settings for a module instance",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleConfiguration"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      },
      "patch": {
        "summary": "Update Instance Configuration",
        "description": "Update a specific configuration value for a module instance",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Configuration update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleConfigurationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      }
    },
    "/module/instance/schedule/{instance_id}": {
      "get": {
        "summary": "Get Instance Schedule",
        "description": "Retrieve the schedule configuration for a module instance",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleSchedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Schedule not found"
          }
        }
      },
      "post": {
        "summary": "Create/Update Schedule",
        "description": "Create or update a schedule for a module instance",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for schedule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Schedule details in crontab format",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleScheduleCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule created/updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid schedule format"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Schedule",
        "description": "Delete the schedule for a module instance",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 2)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      }
    },
    "/module/instance/duplicate/{instance_id}": {
      "post": {
        "summary": "Duplicate Module Instance",
        "description": "Duplicate a module instance to a specified company (can be the same or different company)",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "The ID of the module instance to duplicate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Duplication details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleDuplicate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Module instance duplicated successfully"
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 3 on both source and destination companies)"
          },
          "404": {
            "description": "Module instance not found"
          }
        }
      }
    },
    "/contacts/list": {
      "get": {
        "summary": "List Contacts",
        "description": "Retrieve a paginated list of contacts with filtering and sorting options",
        "parameters": [
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting (defaults to UTC)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 20 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter contacts by name, email, or phone (case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter contacts by tags",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["last_activity", "created_at"],
              "default": "last_activity"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/contacts/{contact_id}": {
      "get": {
        "summary": "Get Contact",
        "description": "Retrieve detailed information about a specific contact including recent activity",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The ID of the contact",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "patch": {
        "summary": "Update Contact",
        "description": "Update an existing contact's information",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The ID of the contact",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Contact update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Contact",
        "description": "Delete a contact",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The ID of the contact to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      }
    },
    "/contacts": {
      "post": {
        "summary": "Create Contact",
        "description": "Create a new contact",
        "requestBody": {
          "description": "Contact creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact created successfully"
          },
          "400": {
            "description": "Bad Request - Invalid contact data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/conversations/list": {
      "get": {
        "summary": "List Conversations",
        "description": "Retrieve a paginated list of conversations (contacts with message/call activity)",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter conversations by contact name (case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unread_only",
            "in": "query",
            "description": "If 'true', only return conversations with unread messages or unopened calls",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/conversations/{contact_id}": {
      "get": {
        "summary": "Get Conversation",
        "description": "Retrieve unified conversation history for a contact (messages, calls, tool calls, and interrupts)",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "The ID of the contact",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting (defaults to UTC)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      }
    },
    "/agent/call-logs/": {
      "get": {
        "summary": "List Call Logs",
        "description": "Retrieve a paginated list of voicebot call logs with filtering options",
        "parameters": [
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name, phone number, or thread ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by call status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "agent",
            "in": "query",
            "description": "Filter by agent ID",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Filter by call direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["inbound", "outbound", "all"],
              "default": "all"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "min_score",
            "in": "query",
            "description": "Minimum score filter (0-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "max_score",
            "in": "query",
            "description": "Maximum score filter (0-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Call logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallLogList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/agent/call-logs/{agent_id}": {
      "get": {
        "summary": "List Call Logs by Agent",
        "description": "Retrieve a paginated list of voicebot call logs for a specific agent with filtering options",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to filter call logs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name, phone number, or thread ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by call status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Filter by call direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["inbound", "outbound", "all"],
              "default": "all"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "min_score",
            "in": "query",
            "description": "Minimum score filter (0-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "max_score",
            "in": "query",
            "description": "Maximum score filter (0-100)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Call logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallLogList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/chat-logs/": {
      "get": {
        "summary": "List Chat Logs",
        "description": "Retrieve a paginated list of chatbot conversation logs with filtering options",
        "parameters": [
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name, phone number, or thread ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by conversation status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "agent",
            "in": "query",
            "description": "Filter by agent ID",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatLogList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/agent/chat-logs/{agent_id}": {
      "get": {
        "summary": "List Chat Logs by Agent",
        "description": "Retrieve a paginated list of chatbot conversation logs for a specific agent with filtering options",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to filter chat logs",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name, phone number, or thread ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by conversation status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "ISO-8601 datetime string for date range end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatLogList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/transcript/list": {
      "get": {
        "summary": "List Transcripts",
        "description": "Retrieve a paginated list of transcripts (both calls and chats) with basic information",
        "parameters": [
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by thread status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name or phone number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcripts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/agent/transcript/list/{agent_id}": {
      "get": {
        "summary": "List Transcripts by Agent",
        "description": "Retrieve a paginated list of transcripts for a specific agent (both calls and chats) with basic information",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "description": "The ID of the agent to filter transcripts",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination. Page size is 10 items.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by thread status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by contact name or phone number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcripts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/agent/transcript/{transcript_id}": {
      "get": {
        "summary": "Get Transcript",
        "description": "Retrieve detailed transcript information including messages, tool calls, and cost breakdown",
        "parameters": [
          {
            "name": "transcript_id",
            "in": "path",
            "description": "The ID of the thread/transcript",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Timezone",
            "in": "header",
            "description": "User's timezone for timestamp formatting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcript details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscriptDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "404": {
            "description": "Transcript not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Transcript",
        "description": "Delete a transcript (thread)",
        "parameters": [
          {
            "name": "transcript_id",
            "in": "path",
            "description": "The ID of the thread/transcript to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcript deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          },
          "404": {
            "description": "Transcript not found"
          }
        }
      }
    },
    "/settings/company": {
      "get": {
        "summary": "Get Company Settings",
        "description": "Retrieve company settings including staff and pending invites",
        "responses": {
          "200": {
            "description": "Company settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      },
      "patch": {
        "summary": "Update Company Settings",
        "description": "Update company settings",
        "requestBody": {
          "description": "Company update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CompanyUpdateMultipart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          }
        }
      },
      "delete": {
        "summary": "Delete Company",
        "description": "Delete the company and all associated schedules",
        "responses": {
          "200": {
            "description": "Company deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          }
        }
      }
    },
    "/settings/transfer": {
      "post": {
        "summary": "Transfer Company",
        "description": "Transfer company ownership to a different agency",
        "requestBody": {
          "description": "Transfer details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyTransfer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company transferred successfully"
          },
          "400": {
            "description": "Bad Request - Missing agency_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Requires level 4 and agency/enterprise admin access"
          }
        }
      }
    },
    "/settings/duplicate": {
      "post": {
        "summary": "Duplicate Company",
        "description": "Duplicate the current company to a new company with all configurations, modules, and agents",
        "requestBody": {
          "description": "Duplication details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDuplicate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company duplicated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "New company ID"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Requires level 4 and agency/enterprise admin access"
          }
        }
      }
    },
    "/settings/invite": {
      "post": {
        "summary": "Invite Staff Member",
        "description": "Invite a user to join the company or add existing user as staff",
        "requestBody": {
          "description": "Invitation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffInvite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member invited successfully"
          },
          "400": {
            "description": "Bad Request - Invalid email or role"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          }
        }
      },
      "delete": {
        "summary": "Cancel Invitation",
        "description": "Cancel a pending company invitation",
        "requestBody": {
          "description": "Invitation ID to cancel",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation cancelled successfully"
          },
          "400": {
            "description": "Bad Request - Missing invite_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          },
          "404": {
            "description": "Invitation not found"
          }
        }
      }
    },
    "/settings/staff": {
      "patch": {
        "summary": "Update Staff Member",
        "description": "Update a staff member's role",
        "requestBody": {
          "description": "Staff update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid staff_id or role"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      },
      "delete": {
        "summary": "Remove Staff Member",
        "description": "Remove a staff member from the company",
        "requestBody": {
          "description": "Staff ID to remove",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member removed successfully"
          },
          "400": {
            "description": "Bad Request - Missing staff_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      }
    },
    "/settings/phone": {
      "get": {
        "summary": "List Phone Numbers",
        "description": "Retrieve all phone numbers available to the company (both company-owned and agency-assigned)",
        "responses": {
          "200": {
            "description": "Phone numbers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      },
      "post": {
        "summary": "Add/Update Phone Number",
        "description": "Add or update a phone number",
        "requestBody": {
          "description": "Phone number details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number added/updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid phone number or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          }
        }
      },
      "patch": {
        "summary": "Assign Agent to Phone Number",
        "description": "Assign or unassign an agent to a phone number",
        "requestBody": {
          "description": "Phone number assignment details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberAssign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number assignment updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid phone_number_id or cannot assign to verified_caller_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires level 4)"
          },
          "404": {
            "description": "Phone number not found"
          }
        }
      }
    },
    "/agency": {
      "get": {
        "summary": "Get Agency Settings",
        "description": "Retrieve agency settings including admins and pending invites. Note: Requires Agency API Key.",
        "responses": {
          "200": {
            "description": "Agency settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgencySettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      },
      "patch": {
        "summary": "Update Agency Settings",
        "description": "Update agency settings. Note: Requires Agency API Key.",
        "requestBody": {
          "description": "Agency update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyUpdate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AgencyUpdateMultipart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agency updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      }
    },
    "/agency/company": {
      "get": {
        "summary": "List Agency Companies",
        "description": "Retrieve a list of all companies under the agency. Note: Requires Agency API Key.",
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgencyCompanySummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      },
      "post": {
        "summary": "Create Agency Company",
        "description": "Create a new company under the agency. Note: Requires Agency API Key.",
        "requestBody": {
          "description": "Company creation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyCompanyCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AgencyCompanyCreateMultipart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Company ID"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Company limit reached or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      }
    },
    "/agency/company/{company_id}": {
      "get": {
        "summary": "Get Agency Company Details",
        "description": "Retrieve detailed company information including billing data. Note: Requires Agency API Key.",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "The ID of the company",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tab",
            "in": "query",
            "description": "Data type to retrieve",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["agents", "modules", "phone", "transactions"],
              "default": "agents"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "ISO-8601 datetime for single month (default: current month)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "ISO-8601 datetime for date range start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "ISO-8601 datetime for date range end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgencyCompanyDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          },
          "404": {
            "description": "Company not found"
          }
        }
      },
      "patch": {
        "summary": "Update Agency Company",
        "description": "Update company settings (agency admin can modify billing settings). Note: Requires Agency API Key.",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "The ID of the company",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Company update details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyCompanyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid data or cannot modify rate for direct billing"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          },
          "404": {
            "description": "Company not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Agency Company",
        "description": "Delete a company. Note: Requires Agency API Key.",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "The ID of the company to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/agency/phone": {
      "get": {
        "summary": "List Agency Phone Numbers",
        "description": "Retrieve all phone numbers available to the agency. Note: Requires Agency API Key.",
        "responses": {
          "200": {
            "description": "Phone numbers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgencyPhoneNumber"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      },
      "post": {
        "summary": "Add/Update Agency Phone Number",
        "description": "Add or update an agency phone number. Note: Requires Agency API Key.",
        "requestBody": {
          "description": "Phone number details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyPhoneNumberCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number added/updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid phone number or missing required fields"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          }
        }
      },
      "patch": {
        "summary": "Assign Company to Agency Phone Number",
        "description": "Assign or unassign a company to an agency phone number. Note: Requires Agency API Key.",
        "requestBody": {
          "description": "Phone number assignment details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyPhoneNumberAssign"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number assignment updated successfully"
          },
          "400": {
            "description": "Bad Request - Invalid phone_number_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          },
          "404": {
            "description": "Phone number not found"
          }
        }
      },
      "delete": {
        "summary": "Delete Agency Phone Number",
        "description": "Delete an agency phone number. Note: Requires Agency API Key.",
        "requestBody": {
          "description": "Phone number ID to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgencyPhoneNumberDelete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number deleted successfully"
          },
          "400": {
            "description": "Bad Request - Missing phone_number_id"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing agency API key"
          },
          "403": {
            "description": "Forbidden - Requires agency admin access"
          },
          "404": {
            "description": "Phone number not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the agent"
          },
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "type": {
            "type": "string",
            "enum": ["chatbot", "voicebot"],
            "description": "Type of agent"
          },
          "prompt": {
            "type": "string",
            "description": "System prompt for the agent"
          },
          "model": {
            "type": "string",
            "description": "AI model used by the agent"
          },
          "first_message": {
            "type": "string",
            "description": "Initial message sent by the agent"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "platforms": {
            "type": "array",
            "description": "Platform integrations (chatbot only)",
            "items": {
              "$ref": "#/components/schemas/Platform"
            }
          },
          "language": {
            "type": "string",
            "description": "Language for the agent (voicebot only)"
          },
          "voice": {
            "$ref": "#/components/schemas/Voice",
            "description": "Voice settings (voicebot only)"
          },
          "background": {
            "type": "string",
            "enum": ["lounge", "off", "url"],
            "description": "Background audio (voicebot only)"
          },
          "variables": {
            "type": "array",
            "description": "Custom variables (voicebot only)",
            "items": {
              "$ref": "#/components/schemas/Variable"
            }
          },
          "number_list": {
            "type": "array",
            "description": "Associated phone numbers (voicebot only)",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "advanced": {
            "$ref": "#/components/schemas/AdvancedSettings"
          }
        }
      },
      "Tool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "mcp_tool": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "auth_token": {
            "type": "string"
          },
          "is_async": {
            "type": "boolean"
          },
          "is_success": {
            "type": "boolean"
          },
          "icon_url": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          },
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolParameter"
            }
          }
        }
      },
      "ToolParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "file": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Format: YYYY-MM-DD HH:MM:SS"
          }
        }
      },
      "Platform": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "min_delay": {
            "type": "number"
          },
          "max_delay": {
            "type": "number"
          },
          "trigger": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "Voice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "accent": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "previewUrl": {
            "type": "string"
          }
        }
      },
      "Variable": {
        "type": "object",
        "properties": {
          "variable": {
            "type": "string"
          },
          "default": {
            "type": "string"
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "friendly_name": {
            "type": "string"
          }
        }
      },
      "AdvancedSettings": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string"
          },
          "interrupt_mode": {
            "type": "boolean",
            "description": "Chatbot only"
          },
          "hipaa_enabled": {
            "type": "boolean",
            "description": "Voicebot only"
          },
          "forwarding_number": {
            "type": "string",
            "description": "Voicebot only"
          },
          "voicemail_message": {
            "type": "string",
            "description": "Voicebot only"
          },
          "end_call_message": {
            "type": "string",
            "description": "Voicebot only"
          },
          "unqualified_prompt": {
            "type": "string",
            "description": "Voicebot only"
          },
          "scoring_prompt": {
            "type": "string",
            "description": "Voicebot only"
          },
          "summary_prompt": {
            "type": "string",
            "description": "Voicebot only"
          },
          "keyterms": {
            "type": "string",
            "description": "Space-separated keywords (voicebot only)"
          },
          "webhook_url": {
            "type": "string",
            "description": "Voicebot only"
          },
          "log_to_crm": {
            "type": "boolean",
            "description": "Voicebot only"
          },
          "recording_consent_message": {
            "type": "string",
            "description": "Voicebot only"
          }
        }
      },
      "AgentCreate": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "type": {
            "type": "string",
            "enum": ["chatbot", "voicebot"],
            "description": "Type of agent to create"
          },
          "description": {
            "type": "string",
            "description": "Description that generates prompt from instructions"
          }
        }
      },
      "AgentUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Agent name"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for the agent"
          },
          "first_message": {
            "type": "string",
            "description": "Initial message"
          },
          "webhook_url": {
            "type": "string",
            "description": "Webhook URL for callbacks"
          },
          "interrupt_mode": {
            "type": "string",
            "enum": ["true", "false"],
            "description": "Enable interrupt mode (chatbot only)"
          },
          "log_to_crm": {
            "type": "string",
            "enum": ["true", "false"],
            "description": "Log conversations to CRM"
          },
          "prompt": {
            "type": "string",
            "description": "System prompt"
          },
          "model": {
            "type": "string",
            "description": "AI model to use"
          },
          "voice": {
            "type": "object",
            "description": "Voice settings (voicebot only)",
            "properties": {
              "id": {
                "type": "string"
              },
              "provider": {
                "type": "string",
                "enum": ["11labs", "playht", "openai"]
              },
              "gender": {
                "type": "string",
                "description": "Optional, for playht provider"
              }
            }
          },
          "language": {
            "type": "string",
            "description": "Language (voicebot only)"
          },
          "keyterms": {
            "type": "string",
            "description": "Space-separated keywords (voicebot only)"
          },
          "background": {
            "type": "string",
            "enum": ["lounge", "off", "url"],
            "description": "Background audio (voicebot only)"
          },
          "hipaa_enabled": {
            "type": "string",
            "enum": ["true", "false"],
            "description": "HIPAA compliance (voicebot only)"
          },
          "forwarding_number": {
            "type": "string",
            "description": "Call forwarding number (voicebot only)"
          },
          "voicemail_message": {
            "type": "string",
            "description": "Voicemail message (voicebot only)"
          },
          "end_call_message": {
            "type": "string",
            "description": "End call message (voicebot only)"
          },
          "recording_consent_message": {
            "type": "string",
            "description": "Recording consent message (voicebot only)"
          },
          "unqualified_prompt": {
            "type": "string",
            "description": "Unqualified lead prompt (voicebot only)"
          },
          "scoring_prompt": {
            "type": "string",
            "description": "Lead scoring prompt (voicebot only)"
          },
          "summary_prompt": {
            "type": "string",
            "description": "Call summary prompt (voicebot only)"
          }
        }
      },
      "AgentList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Agent ID"
                },
                "name": {
                  "type": "string",
                  "description": "Agent name"
                },
                "type": {
                  "type": "string",
                  "enum": ["chatbot", "voicebot"],
                  "description": "Agent type"
                },
                "variables": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variable"
                  }
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total count of agents matching filters"
          }
        }
      },
      "AgentDuplicate": {
        "type": "object",
        "required": ["name", "company_id"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the duplicated agent"
          },
          "company_id": {
            "type": "string",
            "description": "ID of the company where the agent should be duplicated"
          }
        }
      },
      "FileUpdate": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": {
            "type": "string",
            "description": "New text content for the file"
          }
        }
      },
      "FileUpload": {
        "type": "object",
        "required": ["agent_id"],
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "ID of the agent"
          },
          "text": {
            "type": "string",
            "description": "Text content (for text upload option)"
          },
          "name": {
            "type": "string",
            "description": "Name of the file (required when using text option)"
          },
          "urls": {
            "type": "string",
            "description": "Newline-separated URLs for web scraping (for web scraping option)"
          }
        }
      },
      "FileUploadMultipart": {
        "type": "object",
        "required": ["agent_id", "file"],
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "ID of the agent"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload"
          }
        }
      },
      "IntegrationCreate": {
        "type": "object",
        "required": ["platform", "trigger", "min_delay", "max_delay"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Integration ID (for updating existing integration)"
          },
          "platform": {
            "type": "string",
            "description": "Platform name (e.g., instagram, facebook)"
          },
          "trigger": {
            "type": "string",
            "description": "Trigger event"
          },
          "min_delay": {
            "type": "number",
            "description": "Minimum delay in seconds"
          },
          "max_delay": {
            "type": "number",
            "description": "Maximum delay in seconds"
          }
        }
      },
      "IntegrationUpdate": {
        "type": "object",
        "required": ["integration_id"],
        "properties": {
          "integration_id": {
            "type": "string",
            "description": "ID of the integration to update"
          },
          "min_delay": {
            "type": "number",
            "description": "Minimum delay in seconds"
          },
          "max_delay": {
            "type": "number",
            "description": "Maximum delay in seconds"
          },
          "trigger": {
            "type": "string",
            "description": "Trigger event"
          },
          "status": {
            "type": "boolean",
            "description": "Active status"
          }
        }
      },
      "IntegrationDelete": {
        "type": "object",
        "required": ["integration_id"],
        "properties": {
          "integration_id": {
            "type": "string",
            "description": "ID of the integration to delete"
          }
        }
      },
      "ToolSimple": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "mcp_tool": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ToolCreate": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Tool ID (for updating existing tool)"
          },
          "name": {
            "type": "string",
            "description": "Tool name"
          },
          "description": {
            "type": "string",
            "description": "Tool description"
          },
          "url": {
            "type": "string",
            "description": "API endpoint URL"
          },
          "method": {
            "type": "string",
            "default": "POST",
            "description": "HTTP method"
          },
          "type": {
            "type": "string",
            "default": "custom",
            "description": "Tool type"
          },
          "mcp_tool": {
            "type": "string",
            "description": "MCP tool identifier"
          },
          "auth_token": {
            "type": "string",
            "description": "Authentication token"
          },
          "is_async": {
            "type": "boolean",
            "default": false,
            "description": "Async execution flag"
          },
          "is_success": {
            "type": "boolean",
            "default": false,
            "description": "Success status flag"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["request", "response"]
                },
                "content": {
                  "type": "string"
                }
              }
            }
          },
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolParameter"
            }
          }
        }
      },
      "ToolDelete": {
        "type": "object",
        "required": ["tool_id"],
        "properties": {
          "tool_id": {
            "type": "string",
            "description": "ID of the tool to delete"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to send to the chatbot"
          },
          "thread_id": {
            "type": "string",
            "description": "Thread ID for continuing an existing conversation"
          },
          "contact_id": {
            "type": "string",
            "description": "Contact ID"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the user"
          },
          "platform": {
            "type": "string",
            "description": "Platform where the message originated (e.g., sms, email, instagram, facebook)"
          },
          "external_customer_id": {
            "type": "string",
            "description": "External customer ID"
          }
        }
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "The agent's reply message"
          },
          "thread_id": {
            "type": "string",
            "description": "Conversation thread ID"
          },
          "thread_message_id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the message, null if no message created"
          }
        }
      },
      "CallInitiate": {
        "type": "object",
        "required": ["phone_number"],
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "Phone number to call (E.164 format recommended)"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the person being called"
          },
          "agent_number": {
            "type": "string",
            "description": "Phone number to call from (must be assigned to the agent)"
          },
          "external_customer_id": {
            "type": "string",
            "description": "External customer ID for tracking"
          },
          "context": {
            "type": "object",
            "additionalProperties": true,
            "description": "Custom variables for the call that can be used in prompts with {{variable}} placeholders"
          },
          "first_message": {
            "type": "string",
            "description": "Override the agent's default first message"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO-8601 datetime string for scheduling the call (will be converted to UTC)"
          }
        }
      },
      "CallResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Call ID"
          },
          "status": {
            "type": "string",
            "description": "Call status"
          }
        },
        "description": "Call details when initiated immediately"
      },
      "ModuleInstanceSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Module instance ID"
          },
          "icon": {
            "type": "string",
            "description": "Icon URL"
          },
          "status": {
            "type": "string",
            "enum": ["active", "running", "error"],
            "description": "Status based on most recent module run"
          },
          "instance_name": {
            "type": "string",
            "description": "Instance name"
          },
          "description": {
            "type": "string",
            "description": "Module description"
          },
          "activation_type": {
            "type": "string",
            "description": "How the module is activated"
          },
          "custom_params": {
            "type": "object",
            "description": "Custom parameters"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                },
                "preset": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "ModuleInstanceDetail": {
        "type": "object",
        "properties": {
          "instance_name": {
            "type": "string",
            "description": "Instance name"
          },
          "module_name": {
            "type": "string",
            "description": "Module name"
          },
          "description": {
            "type": "string",
            "description": "Module description"
          },
          "icon": {
            "type": "string",
            "description": "Icon URL"
          },
          "schedule": {
            "type": "object",
            "nullable": true,
            "description": "Crontab schedule details, null if not scheduled"
          },
          "activation_type": {
            "type": "string",
            "description": "How the module is activated"
          },
          "configurations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "Masked with * if secret"
                },
                "secret": {
                  "type": "boolean"
                }
              }
            }
          },
          "logs": {
            "type": "array",
            "description": "Logs from the 3 most recent module runs",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "Formatted: DD/MM/YYYY • HH:MM AM/PM in user's timezone"
                },
                "message": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ModuleInstanceCreate": {
        "type": "object",
        "required": ["module_id"],
        "properties": {
          "module_id": {
            "type": "string",
            "description": "ID of the module to create an instance from"
          },
          "instance_name": {
            "type": "string",
            "description": "Name for the instance (defaults to module name if not provided)"
          }
        }
      },
      "ModuleInstanceUpdate": {
        "type": "object",
        "properties": {
          "instance_name": {
            "type": "string",
            "description": "New name for the instance"
          }
        }
      },
      "ModuleConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Configuration ID"
          },
          "name": {
            "type": "string",
            "description": "Configuration name"
          },
          "key": {
            "type": "string",
            "description": "Configuration key"
          },
          "value": {
            "type": "string",
            "description": "Configuration value (masked with * if secret)"
          }
        }
      },
      "ModuleConfigurationUpdate": {
        "type": "object",
        "required": ["key", "value"],
        "properties": {
          "key": {
            "type": "string",
            "description": "Configuration key to update"
          },
          "value": {
            "type": "string",
            "description": "New configuration value"
          }
        }
      },
      "ModuleSchedule": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "string",
            "description": "Hour in crontab format"
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of week in crontab format"
          },
          "day_of_month": {
            "type": "string",
            "description": "Day of month in crontab format"
          }
        }
      },
      "ModuleScheduleCreate": {
        "type": "object",
        "required": ["schedule"],
        "properties": {
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "type": "string",
                "default": "0",
                "description": "Minute in crontab format"
              },
              "hour": {
                "type": "string",
                "default": "0",
                "description": "Hour in crontab format"
              },
              "day_of_week": {
                "type": "string",
                "default": "*",
                "description": "Day of week in crontab format"
              },
              "day_of_month": {
                "type": "string",
                "default": "*",
                "description": "Day of month in crontab format"
              }
            }
          }
        }
      },
      "ModuleDuplicate": {
        "type": "object",
        "required": ["name", "company_id"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the duplicated module instance"
          },
          "company_id": {
            "type": "string",
            "description": "ID of the company where the module instance should be duplicated"
          }
        }
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Contact ID"
                },
                "name": {
                  "type": "string",
                  "description": "Contact name"
                },
                "email": {
                  "type": "string",
                  "description": "Contact email"
                },
                "phone": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "last_activity": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Last activity timestamp in user timezone"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Creation timestamp in user timezone"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total count of contacts"
          }
        }
      },
      "ContactDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_activity": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "recent_activity": {
            "type": "array",
            "description": "3 most recent agent threads (conversations or calls)",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": ["chatbot", "voicebot"]
                },
                "status": {
                  "type": "string"
                },
                "direction": {
                  "type": "string"
                },
                "duration": {
                  "type": "number"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "ContactCreate": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "Contact's full name"
          },
          "email": {
            "type": "string",
            "description": "Contact's email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Contact's phone number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to associate with the contact"
          }
        }
      },
      "ContactUpdate": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "Contact's full name"
          },
          "email": {
            "type": "string",
            "description": "Contact's email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Contact's phone number"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to associate with the contact"
          }
        }
      },
      "ConversationList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Contact ID"
                },
                "name": {
                  "type": "string",
                  "description": "Contact name"
                },
                "last_message": {
                  "type": "string",
                  "description": "Message text or call description with duration (e.g., 'Incoming Call (2:45)')"
                },
                "unread_count": {
                  "type": "integer",
                  "description": "Count of unread messages + unopened calls"
                },
                "last_activity": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Last activity timestamp"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total count of conversations"
          }
        }
      },
      "ConversationDetail": {
        "type": "object",
        "properties": {
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "messages": {
            "type": "array",
            "description": "Unified conversation history with messages, calls, tool calls, and interrupts",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["message"]
                    },
                    "id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "In user timezone"
                    },
                    "role": {
                      "type": "string",
                      "enum": ["user", "assistant"]
                    },
                    "message": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["call"]
                    },
                    "id": {
                      "type": "string"
                    },
                    "agent_name": {
                      "type": "string"
                    },
                    "agent_id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "In user timezone"
                    },
                    "direction": {
                      "type": "string",
                      "enum": ["inbound", "outbound"]
                    },
                    "duration": {
                      "type": "number",
                      "description": "Duration in seconds"
                    },
                    "recording_url": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["tool_call"]
                    },
                    "id": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "In user timezone"
                    },
                    "tool_name": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["interrupt"]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              },
              "has_next": {
                "type": "boolean"
              },
              "has_previous": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "CallLogList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "string",
                  "nullable": true,
                  "description": "Null if agent is deleted"
                },
                "user_name": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string",
                  "description": "Format: YYYY-MM-DD HH:MM:SS in user timezone"
                },
                "status": {
                  "type": "string"
                },
                "error_message": {
                  "type": "string",
                  "description": "Only present if status is 'error'"
                },
                "call_length": {
                  "type": "string",
                  "description": "Format: '2m 45s' or '30s'"
                },
                "direction": {
                  "type": "string",
                  "enum": ["inbound", "outbound"]
                },
                "phone_number": {
                  "type": "string"
                },
                "agent_number": {
                  "type": "string"
                },
                "cost": {
                  "type": "string",
                  "description": "Formatted: '$X.XX'"
                },
                "score": {
                  "type": "number"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total count of call logs"
          },
          "queue_count": {
            "type": "integer",
            "description": "Number of calls in queue"
          }
        }
      },
      "ChatLogList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "string",
                  "nullable": true,
                  "description": "Null if agent is deleted"
                },
                "user_name": {
                  "type": "string"
                },
                "phone_number": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "description": "Format: YYYY-MM-DD HH:MM:SS in user timezone"
                },
                "last_activity": {
                  "type": "string",
                  "description": "Format: YYYY-MM-DD HH:MM:SS in user timezone"
                },
                "cost": {
                  "type": "string",
                  "description": "Formatted: '$X.XX'"
                },
                "platform": {
                  "type": "string"
                }
              }
            }
          },
          "total": {
            "type": "integer",
            "description": "Total count of chat logs"
          }
        }
      },
      "TranscriptList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "string"
                },
                "user_name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": ["chatbot", "voicebot"]
                },
                "timestamp": {
                  "type": "string",
                  "description": "Relative time (e.g., '5 minutes ago') if within 7 days, otherwise formatted date DD/MM/YYYY"
                },
                "status": {
                  "type": "string"
                },
                "opened": {
                  "type": "boolean"
                },
                "call_length": {
                  "type": "string",
                  "description": "Format: MM:SS (voicebot only)"
                },
                "direction": {
                  "type": "string",
                  "enum": ["inbound", "outbound"],
                  "description": "Voicebot only"
                },
                "message_count": {
                  "type": "integer",
                  "description": "Chatbot only"
                }
              }
            }
          },
          "queue_count": {
            "type": "integer",
            "description": "Number of calls in queue"
          },
          "total": {
            "type": "integer",
            "description": "Total count of transcripts"
          }
        }
      },
      "TranscriptDetail": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "agent_name": {
            "type": "string"
          },
          "agent_number": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error_message": {
            "type": "string",
            "description": "Only present if status is 'error'"
          },
          "type": {
            "type": "string",
            "enum": ["chatbot", "voicebot"]
          },
          "is_deleted": {
            "type": "boolean"
          },
          "user_name": {
            "type": "string"
          },
          "cost": {
            "type": "string",
            "description": "Formatted: '$X.XX'"
          },
          "score": {
            "type": "number"
          },
          "cost_breakdown": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Formatted: '$X.XXXX'"
            }
          },
          "summary": {
            "type": "string"
          },
          "recording_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "description": "Format: DD/MM/YYYY • HH:MMam/pm in user timezone"
          },
          "timestamp": {
            "type": "string",
            "description": "Format: DD/MM/YYYY • HH:MMam/pm in user timezone"
          },
          "call_length": {
            "type": "string",
            "description": "Format: MM:SS (voicebot only)"
          },
          "direction": {
            "type": "string",
            "enum": ["inbound", "outbound"],
            "description": "Voicebot only"
          },
          "phone_number": {
            "type": "string",
            "description": "Voicebot only"
          },
          "message_count": {
            "type": "integer",
            "description": "Chatbot only"
          },
          "contact_id": {
            "type": "string",
            "description": "Chatbot only"
          },
          "messages": {
            "type": "array",
            "description": "Unified messages from thread messages, tool calls, and interrupts",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["message"]
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Format: DD/MM/YYYY • HH:MMam/pm in user timezone"
                    },
                    "role": {
                      "type": "string",
                      "enum": ["user", "assistant"]
                    },
                    "message": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["tool_call"]
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Format: DD/MM/YYYY • HH:MMam/pm in user timezone"
                    },
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["interrupt"]
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Format: DD/MM/YYYY • HH:MMam/pm in user timezone"
                    },
                    "message": {
                      "type": "string"
                    },
                    "platform": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CompanySettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "description": "Logo URL, null if not set"
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              }
            }
          },
          "api_key": {
            "type": "string"
          },
          "staff": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "role": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 4
                }
              }
            }
          },
          "invites": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "role": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 4
                }
              }
            }
          }
        }
      },
      "CompanyUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          },
          "api_key": {
            "type": "string",
            "description": "Setting this field (any value) triggers API key regeneration"
          }
        }
      },
      "CompanyUpdateMultipart": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "description": "Company logo file"
          },
          "address": {
            "type": "string",
            "description": "JSON string of address object"
          },
          "api_key": {
            "type": "string",
            "description": "Setting this field (any value) triggers API key regeneration"
          }
        }
      },
      "CompanyTransfer": {
        "type": "object",
        "required": ["agency_id"],
        "properties": {
          "agency_id": {
            "type": "string",
            "description": "ID of the agency to transfer ownership to"
          }
        }
      },
      "CompanyDuplicate": {
        "type": "object",
        "required": ["company_name", "agency_id"],
        "properties": {
          "company_name": {
            "type": "string",
            "description": "Name for the new duplicated company"
          },
          "agency_id": {
            "type": "string",
            "description": "ID of the agency for the new company"
          }
        }
      },
      "StaffInvite": {
        "type": "object",
        "required": ["email", "role"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user to invite"
          },
          "role": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4,
            "description": "Permission level (1=read, 2=write, 3=create, 4=admin)"
          }
        }
      },
      "InviteDelete": {
        "type": "object",
        "required": ["invite_id"],
        "properties": {
          "invite_id": {
            "type": "string",
            "description": "ID of the invitation to cancel"
          }
        }
      },
      "StaffUpdate": {
        "type": "object",
        "required": ["staff_id", "role"],
        "properties": {
          "staff_id": {
            "type": "string",
            "description": "ID of the staff member to update"
          },
          "role": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4,
            "description": "New permission level (1=read, 2=write, 3=create, 4=admin)"
          }
        }
      },
      "StaffDelete": {
        "type": "object",
        "required": ["staff_id"],
        "properties": {
          "staff_id": {
            "type": "string",
            "description": "ID of the staff member to remove"
          }
        }
      },
      "PhoneNumberList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "description": "Null if not yet saved"
                },
                "owner": {
                  "type": "string",
                  "enum": ["company", "agency"]
                },
                "integration": {
                  "type": "string",
                  "enum": ["twilio", "vonage", "telnyx", "sip"]
                },
                "type": {
                  "type": "string",
                  "enum": ["phone_number", "verified_caller_id"]
                },
                "country": {
                  "type": "string"
                },
                "friendly_name": {
                  "type": "string"
                },
                "phone_number": {
                  "type": "string"
                },
                "agent": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "rebill_on": {
                  "type": "boolean"
                },
                "inbound_cost": {
                  "type": "number"
                },
                "outbound_cost": {
                  "type": "number"
                },
                "charge_per_second": {
                  "type": "boolean",
                  "description": "For SIP only"
                },
                "sip_uri": {
                  "type": "string",
                  "description": "For SIP only"
                },
                "sip_username": {
                  "type": "string",
                  "description": "For SIP only"
                },
                "sip_password": {
                  "type": "string",
                  "description": "For SIP only"
                }
              }
            }
          },
          "integration": {
            "type": "boolean",
            "description": "True if company has telephony integration"
          }
        }
      },
      "PhoneNumberCreate": {
        "type": "object",
        "required": ["type", "integration", "friendly_name", "phone_number"],
        "properties": {
          "phone_number_id": {
            "type": "string",
            "description": "For updates only"
          },
          "type": {
            "type": "string",
            "enum": ["phone_number", "verified_caller_id"]
          },
          "integration": {
            "type": "string",
            "enum": ["twilio", "vonage", "telnyx", "sip"]
          },
          "friendly_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "inbound_cost": {
            "type": "number",
            "default": 0.0
          },
          "outbound_cost": {
            "type": "number",
            "default": 0.0
          },
          "charge_per_second": {
            "type": "boolean",
            "default": false
          },
          "rebill_on": {
            "type": "boolean",
            "default": false
          },
          "sip_uri": {
            "type": "string",
            "description": "Required for SIP integration"
          },
          "sip_username": {
            "type": "string",
            "description": "Required for SIP integration"
          },
          "sip_password": {
            "type": "string",
            "description": "Required for SIP integration"
          }
        }
      },
      "PhoneNumberAssign": {
        "type": "object",
        "required": ["phone_number_id", "owner"],
        "properties": {
          "phone_number_id": {
            "type": "string"
          },
          "owner": {
            "type": "string",
            "enum": ["company", "agency"]
          },
          "agent": {
            "type": "string",
            "nullable": true,
            "description": "Agent ID or null to unassign"
          },
          "sip_uri": {
            "type": "string",
            "description": "Optional SIP credential update"
          },
          "sip_username": {
            "type": "string",
            "description": "Optional SIP credential update"
          },
          "sip_password": {
            "type": "string",
            "description": "Optional SIP credential update"
          }
        }
      },
      "AgencySettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "description": "Logo URL, null if not set"
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              }
            }
          },
          "api_key": {
            "type": "string"
          },
          "admins": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          },
          "invites": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "AgencyUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip_code": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          },
          "api_key": {
            "type": "string",
            "description": "Setting this field (any value) triggers API key regeneration"
          }
        }
      },
      "AgencyUpdateMultipart": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "description": "Agency logo file"
          },
          "address": {
            "type": "string",
            "description": "JSON string of address object"
          },
          "api_key": {
            "type": "string",
            "description": "Setting this field (any value) triggers API key regeneration"
          }
        }
      },
      "AgencyCompanySummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "nullable": true,
            "description": "Logo URL, null if not set"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "AgencyCompanyCreate": {
        "type": "object",
        "required": [
          "name",
          "email",
          "address",
          "city",
          "state",
          "zip_code",
          "country"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "user_email": {
            "type": "string",
            "description": "Optional - assigns existing user as owner"
          }
        }
      },
      "AgencyCompanyCreateMultipart": {
        "type": "object",
        "required": [
          "name",
          "email",
          "address",
          "city",
          "state",
          "zip_code",
          "country"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "description": "Company logo file"
          },
          "user_email": {
            "type": "string",
            "description": "Optional - assigns existing user as owner"
          }
        }
      },
      "AgencyCompanyDetail": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "description": "Logo URL"
          },
          "email": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "settings": {
            "type": "object",
            "properties": {
              "stripe_check": {
                "type": "boolean"
              },
              "ghl_check": {
                "type": "boolean"
              },
              "auto_rebill": {
                "type": "string",
                "enum": ["off", "agency_wallet", "ghl_wallet", "direct_billing"]
              },
              "chat_multiplier": {
                "type": "number"
              },
              "call_rate": {
                "oneOf": [{ "type": "string" }, { "type": "number" }]
              },
              "max_concurrent_lanes": {
                "type": "integer"
              },
              "concurrent_lanes": {
                "type": "integer"
              },
              "retainer_fee": {
                "type": "number"
              },
              "agent_limit": {
                "type": "integer",
                "nullable": true
              }
            }
          },
          "billing": {
            "type": "object",
            "properties": {
              "list": {
                "type": "array",
                "description": "Content varies based on 'tab' parameter"
              },
              "total": {
                "type": "number"
              }
            }
          }
        }
      },
      "AgencyCompanyUpdate": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "auto_rebill": {
            "type": "string",
            "enum": ["off", "agency_wallet", "ghl_wallet", "direct_billing"]
          },
          "call_rate": {
            "oneOf": [{ "type": "string" }, { "type": "number" }],
            "description": "Cannot modify if direct_billing"
          },
          "concurrent_lanes": {
            "type": "integer",
            "description": "Capped at agency's max"
          },
          "chat_multiplier": {
            "type": "number",
            "description": "Cannot modify if direct_billing"
          },
          "retainer_fee": {
            "type": "number"
          },
          "agent_limit": {
            "oneOf": [{ "type": "integer" }, { "type": "string" }],
            "description": "Empty string sets to null"
          }
        }
      },
      "AgencyPhoneNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "Null if not yet saved"
          },
          "integration": {
            "type": "string",
            "enum": ["twilio", "vonage", "telnyx", "sip"]
          },
          "type": {
            "type": "string",
            "enum": ["phone_number", "verified_caller_id"]
          },
          "country": {
            "type": "string"
          },
          "friendly_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "company": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "rebill_on": {
            "type": "boolean"
          },
          "inbound_cost": {
            "type": "number"
          },
          "outbound_cost": {
            "type": "number"
          },
          "charge_per_second": {
            "type": "boolean",
            "description": "For SIP only"
          },
          "sip_uri": {
            "type": "string",
            "description": "For SIP only"
          },
          "sip_username": {
            "type": "string",
            "description": "For SIP only"
          },
          "sip_password": {
            "type": "string",
            "description": "For SIP only"
          }
        }
      },
      "AgencyPhoneNumberCreate": {
        "type": "object",
        "required": ["type", "integration", "friendly_name", "phone_number"],
        "properties": {
          "phone_number_id": {
            "type": "string",
            "description": "For updates only"
          },
          "type": {
            "type": "string",
            "enum": ["phone_number", "verified_caller_id"]
          },
          "integration": {
            "type": "string",
            "enum": ["twilio", "vonage", "telnyx", "sip"]
          },
          "friendly_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "inbound_cost": {
            "type": "number",
            "default": 0.0
          },
          "outbound_cost": {
            "type": "number",
            "default": 0.0
          },
          "charge_per_second": {
            "type": "boolean",
            "default": false
          },
          "rebill_on": {
            "type": "boolean",
            "default": false
          },
          "sip_uri": {
            "type": "string",
            "description": "Required for SIP integration"
          },
          "sip_username": {
            "type": "string",
            "description": "Required for SIP integration"
          },
          "sip_password": {
            "type": "string",
            "description": "Required for SIP integration"
          }
        }
      },
      "AgencyPhoneNumberAssign": {
        "type": "object",
        "required": ["phone_number_id"],
        "properties": {
          "phone_number_id": {
            "type": "string"
          },
          "company": {
            "type": "string",
            "description": "Company ID or 'unassigned' to unassign"
          },
          "sip_uri": {
            "type": "string",
            "description": "Optional SIP credential update"
          },
          "sip_username": {
            "type": "string",
            "description": "Optional SIP credential update"
          },
          "sip_password": {
            "type": "string",
            "description": "Optional SIP credential update"
          }
        }
      },
      "AgencyPhoneNumberDelete": {
        "type": "object",
        "required": ["phone_number_id"],
        "properties": {
          "phone_number_id": {
            "type": "string",
            "description": "ID of the phone number to delete"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "API key without 'Bearer' prefix"
      }
    }
  }
}
